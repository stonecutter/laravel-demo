version: 2 # use CircleCI 2.0

jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker 
      - image: circleci/php:7.2-node-browsers # ...with this image as the primary container; this is where all `steps` will run
      - image: circleci/mysql:5.7
        environment:
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_ROOT_HOST: "%"
          MYSQL_ROOT_PASSWORD: ''
          MYSQL_DATABASE: circleci
      - image: redis
    working_directory: ~/laravel # directory where steps will run
    steps: # a set of executable commands
      - checkout # special step to check out source code to working directory
      - run: if [ "$CIRCLE_BRANCH" != "master" ]; then git fetch --force origin master:master; fi # fuck circleci bug. https://support.circleci.com/hc/en-us/articles/115015659247-How-do-I-modify-the-checkout-step-
      - run: sudo apt install -y gnupg2 libjpeg-dev libpng-dev libsqlite3-dev zlib1g-dev
      - run: sudo -E docker-php-ext-configure gd --with-gd --with-jpeg-dir --with-png-dir --with-zlib-dir
      - run: sudo -E docker-php-ext-install gd pdo_mysql
      - run: sudo -E docker-php-ext-enable opcache
      - run: sudo composer self-update
      - run:
          name: Wait for DB
          # preinstalled in circleci/* docker image
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 120s
      - run:
          name: Wait for Redis to receive connections
          command: dockerize -wait tcp://localhost:6379 -timeout 20s
      - restore_cache: # special step to restore the dependency cache if `composer.lock` does not change
          keys:
            - composer-v1-{{ checksum "composer.lock" }}
            # fallback to using the latest cache if no exact match is found (See https://circleci.com/docs/2.0/caching/)
            - composer-v1-
      - run: composer install -n --prefer-dist
      - save_cache: # special step to save the dependency cache with the `composer.lock` cache key template
          key: composer-v1-{{ checksum "composer.lock" }}
          paths:
            - vendor
      - restore_cache: # special step to restore the dependency cache if `package.json` does not change
          keys:
            - node-v1-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found (See https://circleci.com/docs/2.0/caching/)
            - node-v1-
      - run: yarn install
      - save_cache: # special step to save the dependency cache with the `package.json` cache key template
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run: touch database/database.sqlite
      - run:
          command: |
            ./lint.sh
            ./phpunit.sh
